# -*- coding: utf-8 -*-
"""ML-Exercise-5.8.1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rsYBpfeVi0ahHiRE6MDu2zuwlON249GT
"""

# ðŸ“Œ Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# ðŸ“Œ Sample Taxi Trips dataset (10 rows for demo purpose)
data = {
    'Trip Start Timestamp': ['2023-01-01 08:00:00', '2023-01-01 09:30:00', '2023-01-01 10:15:00',
                             '2023-01-02 11:45:00', '2023-01-02 13:00:00', '2023-01-03 07:30:00',
                             '2023-01-03 08:45:00', '2023-01-04 09:15:00', '2023-01-04 10:00:00', '2023-01-04 11:30:00'],
    'Trip End Timestamp': ['2023-01-01 08:30:00', '2023-01-01 09:45:00', '2023-01-01 10:30:00',
                           '2023-01-02 12:15:00', '2023-01-02 13:20:00', '2023-01-03 08:00:00',
                           '2023-01-03 09:00:00', '2023-01-04 09:45:00', '2023-01-04 10:30:00', '2023-01-04 12:00:00'],
    'Trip Seconds': [1800, 900, 900, 1800, 1200, 1800, 900, 1800, 1800, 1800],
    'Trip Miles': [5.2, 3.0, 2.8, 6.5, 4.0, 5.0, 3.5, 5.8, 6.1, 5.4],
    'Fare': [12.5, 8.0, 7.5, 15.0, 10.0, 13.0, 9.0, 14.0, 14.5, 13.5]
}

df = pd.DataFrame(data)

# Convert time columns to datetime
df['Trip Start Timestamp'] = pd.to_datetime(df['Trip Start Timestamp'])
df['Trip End Timestamp'] = pd.to_datetime(df['Trip End Timestamp'])

# Show first few rows
df.head()

# ðŸ“Œ Feature engineering
df['Hour'] = df['Trip Start Timestamp'].dt.hour
df['Weekday'] = df['Trip Start Timestamp'].dt.weekday

# ðŸ“Œ Select features and target
X = df[['Trip Seconds', 'Trip Miles', 'Hour', 'Weekday']]
y = df['Fare']

# ðŸ“Œ Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ðŸ“Œ Train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# ðŸ“Œ Predict on test set
y_pred = model.predict(X_test)

# ðŸ“Œ Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error (MSE):", mse)
print("Root Mean Squared Error (RMSE):", np.sqrt(mse))
print("R-squared (RÂ²):", r2)

# ðŸ“Œ Show actual vs predicted fares
predictions_df = pd.DataFrame({
    'Actual Fare': y_test.values,
    'Predicted Fare': y_pred
})
predictions_df.head(10)

# ðŸ“Œ Plot: Actual vs Predicted
plt.figure(figsize=(8,6))
plt.scatter(y_test, y_pred, alpha=0.7, color='green')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')  # reference line
plt.xlabel("Actual Fare")
plt.ylabel("Predicted Fare")
plt.title("Actual vs Predicted Taxi Fares")
plt.grid(True)
plt.show()